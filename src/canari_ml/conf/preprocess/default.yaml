# @package _global_

# Boiler plate - not to be modified
# _________________________________

defaults:
  - _self_
  - /common/default
  - /paths/download
  - /paths/preprocess
  - /paths/train  # Used for generating normalised predict dataset
                  # based on training dataset normalisation
                  # (to get location of normalised training dataset)

# User modifiable parameters
# __________________________

input:
  name: ""
  forecast_length: 3
  lag_length: ${input.forecast_length}
  vars:
    absolute:
      - sic
      - tas
      - tos
      - ua2
      - ua10
      - ua50
      - ua100
      - ua250
      - ua500
      - ua700
    anomaly:
      - zg2
      - zg10
      - zg50
      - zg100
      - zg250
      - zg500
      - zg700
  dates:
    train:
      start:
        - 2000-1-5 # For multiple: `input.dates.train.start="[2000-1-5,2001-1-1]"`
      end:
        - 2000-1-5
    val:
      start:
        - 2000-4-5
      end:
        - 2000-4-5
    test:
      start:
        - 2000-2-1
      end:
        - 2000-2-1
    predict: # Only used for prediction, above used only for training.
      start:
        - 2000-2-1
      end:
        - 2000-2-1

# Pre-processing steps
# ____________________
reproject:
  source_crs: EPSG:4326
  target_crs: EPSG:6931
  shape: 500

preprocess_era5:
  implementation: "canari_ml.data.processors.cds:ERA5PreProcessor"
  smooth_sigma: 0.5

preprocess_mask:
  implementation: "canari_ml.data.masks.era5:Masks"
  channel_name: hemisphere

preprocess_cache:
  implementation: "serial"
  output_batch_size: 4

workers: 16

# Boiler plate - not to be modified
# _________________________________

frequency: DAY
hemisphere: north

params:
  # Main preprocess config output params
  config_suffix: ${frequency}.${hemisphere}
  config_name: ${hydra:job.name}

hashes:
  reproject: ${compute_step_hash:[${input}, ${preprocess_type}, ${reproject}], ${input.name}}
  preprocess_era5: ${compute_step_hash:[${hashes.reproject}, ${preprocess_era5}], ${input.name}}
  preprocess_mask: ${compute_step_hash:[${hashes.preprocess_era5}, ${preprocess_mask}], ${input.name}}
  cache: ${compute_step_hash:[${hashes.preprocess_mask}, ${preprocess_cache}], ${input.name}}
  combined: ${compute_step_hash:[${hashes.preprocess_mask}], ${input.name}}

preprocess_type: train # Automatically handled by Python CLI subcommand
